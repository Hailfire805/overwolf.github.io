"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[9130],{3905:(e,t,i)=>{i.r(t),i.d(t,{MDXContext:()=>l,MDXProvider:()=>f,mdx:()=>v,useMDXComponents:()=>d,withMDXComponents:()=>c});var n=i(67294);function r(e,t,i){return t in e?Object.defineProperty(e,t,{value:i,enumerable:!0,configurable:!0,writable:!0}):e[t]=i,e}function o(){return o=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var i=arguments[t];for(var n in i)Object.prototype.hasOwnProperty.call(i,n)&&(e[n]=i[n])}return e},o.apply(this,arguments)}function a(e,t){var i=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),i.push.apply(i,n)}return i}function p(e){for(var t=1;t<arguments.length;t++){var i=null!=arguments[t]?arguments[t]:{};t%2?a(Object(i),!0).forEach((function(t){r(e,t,i[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(i)):a(Object(i)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(i,t))}))}return e}function s(e,t){if(null==e)return{};var i,n,r=function(e,t){if(null==e)return{};var i,n,r={},o=Object.keys(e);for(n=0;n<o.length;n++)i=o[n],t.indexOf(i)>=0||(r[i]=e[i]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)i=o[n],t.indexOf(i)>=0||Object.prototype.propertyIsEnumerable.call(e,i)&&(r[i]=e[i])}return r}var l=n.createContext({}),c=function(e){return function(t){var i=d(t.components);return n.createElement(e,o({},t,{components:i}))}},d=function(e){var t=n.useContext(l),i=t;return e&&(i="function"==typeof e?e(t):p(p({},t),e)),i},f=function(e){var t=d(e.components);return n.createElement(l.Provider,{value:t},e.children)},u="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},y=n.forwardRef((function(e,t){var i=e.components,r=e.mdxType,o=e.originalType,a=e.parentName,l=s(e,["components","mdxType","originalType","parentName"]),c=d(i),f=r,u=c["".concat(a,".").concat(f)]||c[f]||m[f]||o;return i?n.createElement(u,p(p({ref:t},l),{},{components:i})):n.createElement(u,p({ref:t},l))}));function v(e,t){var i=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=i.length,a=new Array(o);a[0]=y;var p={};for(var s in t)hasOwnProperty.call(t,s)&&(p[s]=t[s]);p.originalType=e,p[u]="string"==typeof e?e:r,a[1]=p;for(var l=2;l<o;l++)a[l]=i[l];return n.createElement.apply(null,a)}return n.createElement.apply(null,i)}y.displayName="MDXCreateElement"},64673:(e,t,i)=>{i.r(t),i.d(t,{assets:()=>s,contentTitle:()=>a,default:()=>d,frontMatter:()=>o,metadata:()=>p,toc:()=>l});var n=i(87462),r=(i(67294),i(3905));const o={id:"type-definition-file",image:"/img/embed/api-best-practices.jpg",title:"Overwolf Type definition file",sidebar_label:"Type definition file",sidebar_custom_props:{overwolf_platform:!0,electron_platform:!1}},a=void 0,p={unversionedId:"topics/best-practices/type-definition-file",id:"topics/best-practices/type-definition-file",title:"Overwolf Type definition file",description:"Even if your application not uses TypeScript at all, you can use the type definition files for autocompletion and documentation purposes. More details here.",source:"@site/pages/docs/topics/best-practices/type-definition-file.mdx",sourceDirName:"topics/best-practices",slug:"/topics/best-practices/type-definition-file",permalink:"/topics/best-practices/type-definition-file",draft:!1,editUrl:"https://github.com/overwolf/overwolf.github.io/tree/source/website/pages/docs/topics/best-practices/type-definition-file.mdx",tags:[],version:"current",lastUpdatedBy:"Oded Itkin",lastUpdatedAt:1667999405,formattedLastUpdatedAt:"Nov 9, 2022",frontMatter:{id:"type-definition-file",image:"/img/embed/api-best-practices.jpg",title:"Overwolf Type definition file",sidebar_label:"Type definition file",sidebar_custom_props:{overwolf_platform:!0,electron_platform:!1}},sidebar:"topics",previous:{title:"Second monitor usage",permalink:"/topics/best-practices/second-monitor"},next:{title:"User journey and error handling",permalink:"/topics/best-practices/user-flow-and-error-handling"}},s={},l=[{value:"TypeScript overview",id:"typescript-overview",level:2},{value:"TypeScript definition files overview",id:"typescript-definition-files-overview",level:2},{value:"Using overwolf.d.ts file",id:"using-overwolfdts-file",level:2},{value:"Using types for games events",id:"using-types-for-games-events",level:2}],c={toc:l};function d(e){let{components:t,...o}=e;return(0,r.mdx)("wrapper",(0,n.Z)({},c,o,{components:t,mdxType:"MDXLayout"}),(0,r.mdx)("admonition",{type:"important"},(0,r.mdx)("p",{parentName:"admonition"},"Even if your application not uses TypeScript at all, you can use the type definition files for autocompletion and documentation purposes. More details ",(0,r.mdx)("a",{parentName:"p",href:"#using-overwolfdts-file"},"here"),".")),(0,r.mdx)("p",null,(0,r.mdx)("strong",{parentName:"p"},"You can find the Overwolf API ts definition file ",(0,r.mdx)("a",{parentName:"strong",href:"https://bit.ly/overwolf-ts-file"},"here"))),(0,r.mdx)("p",null,"If you are working with Typescript, you can install it as a ",(0,r.mdx)("a",{parentName:"p",href:"https://bit.ly/overwolf-types-npm"},"npm package"),"."),(0,r.mdx)("h2",{id:"typescript-overview"},"TypeScript overview"),(0,r.mdx)("p",null,"TypeScript is a superset of JavaScript which adds optional static typing to the language, hence its name. Static typing enables the compiler to check that operations performed on variables are legal. Those checks prevent you from attempting to invoke a number as a function, for example."),(0,r.mdx)("p",null,"TypeScript can help us to avoid painful bugs that developers commonly run into when writing JavaScript by type-checking the code. It reduces bugs like null handling, undefined, etc. Strongly typed characteristics restrict developers to write type-specific code with proper checks."),(0,r.mdx)("p",null,"In order for TypeScript to perform the type checking, the types need to be defined somewhere. It's pretty straightforward how to add type definitions to the variables declared in your own code:"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-js"},"//  anyObject hold values of any arbitrary type\nvar anyObject: any;\n\n// count is a number\nvar count: number;\n\n\n// regexPatterns is an array of regular expressions\nvar regexPatterns: RegExp[];\n\n// reverse is a function which accepts and returns a string\nvar reverse: (input: string) => string;\n")),(0,r.mdx)("p",null,"but how does TypeScript know about the types of variables and functions of existing JavaScript libraries? This is where type definition files come into play."),(0,r.mdx)("h2",{id:"typescript-definition-files-overview"},"TypeScript definition files overview"),(0,r.mdx)("p",null,"Type definition files allow you to provide type information for JavaScript code that is by itself (by its very nature) not statically typed. The file extension for such a file is \u201cd.ts\u201d, where d stands for definition. Type definition files make it possible to enjoy the benefits of type checking, autocompletion, and member documentation."),(0,r.mdx)("h2",{id:"using-overwolfdts-file"},"Using overwolf.d.ts file"),(0,r.mdx)("p",null,"Even if your application uses plain JavaScript and no TypeScript at all, you can use the type definition file for autocompletion and documentation purposes. Simply include it in your Visual Studio Code project.  VS will then include the found types in its auto-completion list, given that you've got TypeScript installed:"),(0,r.mdx)("p",null,(0,r.mdx)("img",{alt:"alt-text",src:i(31808).Z,width:"918",height:"373"})),(0,r.mdx)("p",null,"Of course, you won't get the benefit of type checking because you're not actually using TypeScript, but still, the provided information can be very helpful for working with the dynamic and loosely typed language that is JavaScript."),(0,r.mdx)("h2",{id:"using-types-for-games-events"},"Using types for games events"),(0,r.mdx)("p",null,"To make your lives easier when working with our games events API, We've expanded our library with typedef files for the different in-game events.\nWe added Type definition files for each game, for autocompletion and documentation purposes."),(0,r.mdx)("p",null,"You can find the game's events definition files under the same repo and npm package above, under the ",(0,r.mdx)("a",{parentName:"p",href:"https://github.com/overwolf/types/tree/master/gep"},"GEP folder"),"."),(0,r.mdx)("p",null,"VS will then include the found types in its auto-completion list, given that you've got TypeScript installed.  "),(0,r.mdx)("p",null,"Here is an example for Valorant:"),(0,r.mdx)("p",null,(0,r.mdx)("img",{alt:"alt-text",src:i(72285).Z,width:"831",height:"322"})))}d.isMDXComponent=!0},31808:(e,t,i)=>{i.d(t,{Z:()=>n});const n=i.p+"assets/images/def-file-demo-64d4b6443be42808601ec4518ad93a58.gif"},72285:(e,t,i)=>{i.d(t,{Z:()=>n});const n=i.p+"assets/images/valorant.d.ts2-3c53ad9af16201c64e11ec63bae9df6f.gif"}}]);